--1. 별칭 학과명, 계열 
SELECT DEPARTMENT_NAME 학과명, CATEGORY 계열
FROM TB_DEPARTMENT;

--2. 학과의 학과정원표기 방식을 변경
SELECT DEPARTMENT_NAME ||'의 정원은 '||CAPACITY||'명 입니다' AS "학과별 정원"
FROM TB_DEPARTMENT;

SELECT STUDENT_NAME 
FROM TB_DEPARTMENT
WHERE 2 = (SELECT SUBSTR(STUDENT_SSN,8,1)
             FROM TB_STUDENT
             JOIN TB_STUDENT USING (DEPARTMENT_NO));
--3. 국어국문학과 휴학중인 여학생 이름출력
SELECT STUDENT_NAME            
FROM TB_STUDENT S
WHERE '2' = SUBSTR(STUDENT_SSN,8,1)
AND '국어국문학과'= (SELECT DEPARTMENT_NAME FROM TB_DEPARTMENT D
                    WHERE S.DEPARTMENT_NO = D.DEPARTMENT_NO)
AND 'Y' = ABSENCE_YN;

--4. 연체자 게시
SELECT STUDENT_NAME
FROM TB_STUDENT
WHERE STUDENT_NO IN ('A513079', 'A513090', 'A513091', 'A513110', 'A513119')
ORDER BY STUDENT_NAME DESC;

--5. 입학정원 20명 이상 30명 이하 인 학과들의 학과이름,계열을 출력
SELECT DEPARTMENT_NAME, CATEGORY
FROM TB_DEPARTMENT
WHERE CAPACITY BETWEEN '20' AND '30';

--6. 총장이름을 알아내시오
SELECT PROFESSOR_NAME
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IS NULL;

--7. 학과지정되지않은 학생찾는 SQL
SELECT STUDENT_NAME
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO)
WHERE DEPARTMENT_NAME IS NULL ;

--8. 선수과목이 존재하는 과목들이 어떤과목인지 과목코드 조회
SELECT CLASS_NO
FROM TB_CLASS
WHERE PREATTENDING_CLASS_NO IS NOT NULL;

--9. 어떤계열들이 있는지 조회
SELECT CATEGORY 
FROM TB_DEPARTMENT 
GROUP BY CATEGORY
ORDER BY 1;

--10. 02학번 전주 거주자들 모임을 하려한다 휴학한사람을 제외한 학생들의 학번 이름 주민번호 출력
SELECT STUDENT_NO, STUDENT_NAME, STUDENT_SSN
FROM TB_STUDENT
WHERE STUDENT_ADDRESS LIKE '%전주시%'
AND ENTRANCE_DATE LIKE '2002%'
AND ABSENCE_YN = 'N';

--1. funtion
SELECT STUDENT_NO 학번, STUDENT_NAME 이름, ENTRANCE_DATE 입학년도
FROM TB_STUDENT
WHERE DEPARTMENT_NO = '002'
ORDER BY ENTRANCE_DATE ASC;

--2. funtion
SELECT PROFESSOR_NAME, PROFESSOR_SSN
FROM TB_PROFESSOR
WHERE NOT PROFESSOR_NAME LIKE '___';

SELECT SUBSTR(SYSDATE,1,4)
FROM DUAL;
--3. funtion
SELECT PROFESSOR_NAME 교수이름, SUBSTR(SYSDATE,1,4)-CONCAT('19',SUBSTR(PROFESSOR_SSN,1,2)) 만나이
FROM TB_PROFESSOR
WHERE '1' = SUBSTR(PROFESSOR_SSN,8,1)
ORDER BY 만나이 ASC;

--4. funtion
SELECT SUBSTR(PROFESSOR_NAME,2,2)
FROM TB_PROFESSOR;

--5. funtion
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE 19< (SUBSTR(ENTRANCE_DATE,1,4)-SUBSTR(TO_DATE(SUBSTR(STUDENT_SSN,1,2),'RRRR'),1,4));

--6. funtion
SELECT TO_CHAR(TO_DATE(20201225), 'DAY') 크리스마스 
FROM DUAL;

--7. funtion
SELECT TO_DATE('99/10/11','YY/MM/DD'), TO_DATE('49/10/11','YY/MM/DD')
FROM DUAL;

SELECT TO_DATE('99/10/11','RR/MM/DD'), TO_DATE('49/10/11','RR/MM/DD')
FROM DUAL;

--8. funtion
SELECT STUDENT_NO, STUDENT_NAME
FROM TB_STUDENT
WHERE NOT STUDENT_NO LIKE 'A%';

--9. funtion
SELECT ROUND(AVG(POINT),1) 평점
FROM TB_GRADE
JOIN TB_STUDENT USING(STUDENT_NO)
WHERE STUDENT_NO = 'A517178';

--10. funtion
SELECT DEPARTMENT_NO 학과번호 , COUNT(STUDENT_NAME) AS "학생수(명)"
FROM TB_STUDENT 
WHERE DEPARTMENT_NO = DEPARTMENT_NO
GROUP BY DEPARTMENT_NO
ORDER BY 1;

--11. funtion
SELECT COUNT(*) AS "지도교수 배정받지못한 인원"
FROM TB_STUDENT
WHERE COACH_PROFESSOR_NO IS NULL;

--12. funtion
SELECT SUBSTR(TERM_NO,1,4)년도, ROUND(AVG(POINT),1)년도별평점
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY SUBSTR(TERM_NO,1,4);

--13. funtion                 
SELECT DEPARTMENT_NO 학과코드명, COUNT(STUDENT_NAME) AS "휴학생수"
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
GROUP BY DEPARTMENT_NO
ORDER BY 1;

--14. funtion
SELECT STUDENT_NAME 동일이름, COUNT(STUDENT_NAME)동명인수
FROM TB_STUDENT 
WHERE STUDENT_NAME = STUDENT_NAME
AND 1 < (SELECT COUNT(STUDENT_NAME)
           FROM TB_STUDENT 
          WHERE STUDENT_NAME = STUDENT_NAME)
GROUP BY STUDENT_NAME
HAVING COUNT(STUDENT_NAME) >= 2
ORDER BY STUDENT_NAME;

--15. funtion

SELECT SUBSTR(TERM_NO,1,4) AS "년도", SUBSTR(TERM_NO,5,2) AS "학기", ROUND(AVG(POINT),1) 평점
FROM TB_GRADE
WHERE STUDENT_NO = 'A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO,1,4), SUBSTR(TERM_NO,5,2))
ORDER BY 1;

SELECT NVL(SUBSTR(TERM_NO, 1, 4), ' ') 년도, NVL(SUBSTR(TERM_NO, 5, 2), ' ') 학기, ROUND(AVG(POINT), 1) 평점 
FROM TB_GRADE 
WHERE STUDENT_NO = 'A112113' 
GROUP BY ROLLUP (SUBSTR(TERM_NO, 1, 4), SUBSTR(TERM_NO, 5, 2));

--1. option
SELECT STUDENT_NAME 학생이름, STUDENT_ADDRESS 주소지
FROM TB_STUDENT
ORDER BY 1;

--2. option
SELECT STUDENT_NAME 학생이름, STUDENT_SSN 생년
FROM TB_STUDENT
WHERE ABSENCE_YN = 'Y'
ORDER BY 생년 DESC;

--3. option
SELECT STUDENT_NAME 학생이름, STUDENT_NO 학번, STUDENT_ADDRESS "거주지 주소" 
FROM TB_STUDENT 
WHERE STUDENT_NO LIKE '9%' 
AND STUDENT_ADDRESS LIKE '%경기도%' OR STUDENT_ADDRESS LIKE '%강원도%'
ORDER BY STUDENT_NAME;

--4. option
SELECT PROFESSOR_NAME, PROFESSOR_SSN 
FROM TB_PROFESSOR 
WHERE DEPARTMENT_NO = '005' 
ORDER BY PROFESSOR_SSN;


--5. option
SELECT STUDENT_NO, TO_CHAR(POINT, '9.00') POINT 
FROM TB_GRADE 
WHERE TERM_NO = '200402' AND CLASS_NO = 'C3118100' 
ORDER BY POINT DESC, STUDENT_NO;

--6. option
SELECT STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME 
FROM TB_STUDENT 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
ORDER BY STUDENT_NAME;


--7. option
SELECT CLASS_NAME, DEPARTMENT_NAME 
FROM TB_CLASS 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO);

--8. option
SELECT CLASS_NAME, PROFESSOR_NAME 
FROM TB_CLASS 
JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_PROFESSOR USING(PROFESSOR_NO);

--9. option
SELECT CLASS_NAME, PROFESSOR_NAME 
FROM TB_CLASS 
JOIN TB_CLASS_PROFESSOR USING(CLASS_NO)
JOIN TB_PROFESSOR P USING(PROFESSOR_NO) 
JOIN TB_DEPARTMENT D ON(P.DEPARTMENT_NO = D.DEPARTMENT_NO)  
WHERE CATEGORY = '인문사회';

--10. option
SELECT STUDENT_NO 학번, STUDENT_NAME "학생 이름", 
ROUND(AVG(POINT), 1) "전체 평점" 
FROM TB_STUDENT 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
JOIN TB_GRADE USING(STUDENT_NO) 
WHERE DEPARTMENT_NAME = '음악학과' 
GROUP BY STUDENT_NO, STUDENT_NAME 
ORDER BY STUDENT_NO;


--11. option
SELECT DEPARTMENT_NAME 학과이름, STUDENT_NAME 학생이름, 
PROFESSOR_NAME 지도교수이름 
FROM TB_STUDENT 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
JOIN TB_PROFESSOR ON(COACH_PROFESSOR_NO = PROFESSOR_NO)
WHERE STUDENT_NO = 'A313047';


--12. option
SELECT STUDENT_NAME, TERM_NO TERM_NAME 
FROM TB_STUDENT 
JOIN TB_GRADE USING(STUDENT_NO) 
JOIN TB_CLASS USING(CLASS_NO) 
WHERE TERM_NO LIKE '2007%' AND CLASS_NAME = '인간관계론';

--13. option
SELECT CLASS_NAME, DEPARTMENT_NAME 
FROM TB_CLASS 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
LEFT JOIN TB_CLASS_PROFESSOR USING(CLASS_NO) 
WHERE CATEGORY = '예체능' AND PROFESSOR_NO IS NULL;

--14. option
SELECT STUDENT_NAME 학생이름, NVL(PROFESSOR_NAME, '지도교수 미지정') 지도교수 
FROM TB_STUDENT 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
LEFT JOIN TB_PROFESSOR ON(COACH_PROFESSOR_NO = PROFESSOR_NO) 
WHERE DEPARTMENT_NAME = '서반아어학과' 
ORDER BY STUDENT_NO;

--15. option
SELECT STUDENT_NO 학번, STUDENT_NAME 이름, DEPARTMENT_NAME "학과 이름", ROUND(AVG(POINT), 8) 평점 
FROM TB_STUDENT 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
JOIN TB_GRADE USING(STUDENT_NO)
WHERE ABSENCE_YN = 'N' 
GROUP BY STUDENT_NO, STUDENT_NAME, DEPARTMENT_NAME 
HAVING ROUND(AVG(POINT), 8) >= 4.0 
ORDER BY STUDENT_NO;

--16. option
SELECT CLASS_NO, CLASS_NAME, ROUND(AVG(POINT), 8) "AVG(POINT)" 
FROM TB_CLASS 
JOIN TB_GRADE USING(CLASS_NO) 
JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
WHERE DEPARTMENT_NAME = '환경조경학과' 
AND CLASS_TYPE LIKE '전공%' 
GROUP BY CLASS_NO, CLASS_NAME 
ORDER BY CLASS_NO;

--17. option
SELECT STUDENT_NAME, STUDENT_ADDRESS 
FROM TB_STUDENT 
WHERE DEPARTMENT_NO = (SELECT DEPARTMENT_NO 
                         FROM TB_STUDENT 
                        WHERE STUDENT_NAME = '최경희');

--18. option
SELECT STUDENT_NO, STUDENT_NAME 
FROM (SELECT STUDENT_NO, STUDENT_NAME 
        FROM TB_STUDENT 
        JOIN TB_DEPARTMENT USING(DEPARTMENT_NO) 
        JOIN TB_GRADE USING(STUDENT_NO) 
       WHERE DEPARTMENT_NAME = '국어국문학과' 
       GROUP BY STUDENT_NO, STUDENT_NAME 
       ORDER BY AVG(POINT) DESC)
WHERE ROWNUM = 1;

--19. option
SELECT DEPARTMENT_NAME "계열 학과명", ROUND(AVG(POINT), 1) 전공평점 
FROM TB_DEPARTMENT 
JOIN TB_CLASS USING(DEPARTMENT_NO) 
JOIN TB_GRADE USING(CLASS_NO) 
WHERE CATEGORY = (SELECT CATEGORY 
                    FROM TB_DEPARTMENT 
                   WHERE DEPARTMENT_NAME = '환경조경학과')
AND CLASS_TYPE LIKE '전공%' 
GROUP BY DEPARTMENT_NAME 
ORDER BY DEPARTMENT_NAME;

--1. DDL
CREATE TABLE TB_TABLE (
    NAME VARCHAR2(20),
    USE_YN CHAR(1) DEFAULT 'Y'    
);

--2. DDL
CREATE TABLE TB_CLASS_TYPE (
    NO VARCHAR2(5) PRIMARY KEY,
    NAME VARCHAR2(10)   
);
--3. DDL
ALTER TABLE TB_CATAGORY
ADD PRIMARY KEY (NAME);

--4. DDL
ALTER TABLE TB_CLASS_TYPE MODIFY NAME VARCHAR2(20) NOT NULL;

--5. DDL
ALTER TABLE TB_CLASS_TYPE 
    MODIFY NO VARCHAR2(10)
    MODIFY NAME VARCHAR2(20);
    
ALTER TABLE TB_CATEGORY
    MODIFY CATEGORY_NAME VARCHAR2(20);
--6. DDL 
ALTER TABLE TB_CATEGORY RENAME COLUMN NAME TO CATEGORY_NAME;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NO TO CLASS_TYPE_NO;
ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NAME TO CLASS_TYPE_NAME;   

--7.  DDL
ALTER TABLE TB_CATEGORY RENAME CONSTRAINT SYS_C008505 TO PK_CATEGORYNAME;
ALTER TABLE TB_CLASS_TYPE RENAME CONSTRAINT SYS_C008507 TO PK_CLASSTYPENO; 

--8. DDL
INSERT INTO TB_CATEGORY VALUES('공학', 'Y');
INSERT INTO TB_CATEGORY VALUES('자연과학', 'Y');
INSERT INTO TB_CATEGORY VALUES('의학', 'Y');
INSERT INTO TB_CATEGORY VALUES('예체능', 'Y');
INSERT INTO TB_CATEGORY VALUES('인문사회', 'Y');
COMMIT;

--9. DDL
ALTER TABLE TB_DEPARTMENT
ADD FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(CATEGORY_NAME);

--10. DDL
CREATE VIEW VW_학생일반정보 (학번, 학생이름, 주소)
AS SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
  FROM TB_STUDENT;
  
--11. DDL
CREATE OR REPLACE VIEW VW_지도면담 (학생이름, 학과이름, 담당교수이름)
AS SELECT S.STUDENT_NAME, D.DEPARTMENT_NAME, NVL(P.PROFESSOR_NAME,'지도교수없음') 
     FROM TB_STUDENT S
     LEFT JOIN TB_DEPARTMENT D ON (S.DEPARTMENT_NO = D.DEPARTMENT_NO)
     LEFT JOIN TB_PROFESSOR P ON (S.COACH_PROFESSOR_NO = P.PROFESSOR_NO)
      ORDER BY 2;

--12. DDL
CREATE VIEW VW_학과별학생수
AS SELECT DEPARTMENT_NAME,COUNT(DEPARTMENT_NO)AS "STUDENT_COUNT"
FROM TB_STUDENT
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
GROUP BY DEPARTMENT_NAME;

CREATE OR REPLACE VIEW VW_학과별학생수 (DEPARTMENT_NAME, STUDENT_COUNT)
AS SELECT D.DEPARTMENT_NAME, COUNT(*)
    FROM TB_STUDENT S
    JOIN TB_DEPARTMENT D ON (S.DEPARTMENT_NO = D.DEPARTMENT_NO)
    GROUP BY D.DEPARTMENT_NAME;
--13. DDL
UPDATE VW_학생일반정보
   SET 학생이름 = '김정민'
 WHERE 학번 = 'A213046';

--14. DDL
CREATE OR REPLACE VIEW VW_학생일반정보 (학번, 학생이름, 주소)
AS SELECT STUDENT_NO, STUDENT_NAME, STUDENT_ADDRESS
    FROM TB_STUDENT
    WITH READ ONLY;


--15. DDL
SELECT 과목번호, 과목이름, "누적수강생수(명)"
FROM (SELECT CLASS_NO 과목번호, CLASS_NAME 과목이름, COUNT(*) "누적수강수(명)"
        FROM TB_GRADE
        JOIN TB_CLASS USING(CLASS_NO)
        WHERE TERM_NO LIKE '2009%'
           OR TERM_NO LIKE '2008%'
           OR TERM_NO LIKE '2007%'
           GROUP BY CLASS_NO, CLASS_NAME
           ORDER BY 3 DESC)
WHERE ROWNUM <= 3;           
